" ============================================================================
" Install Plugins
" ============================================================================
call plug#begin()

" Time tracking
Plug 'wakatime/vim-wakatime'

" Fuzzy file switching
Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

" File browser
Plug 'francoiscabrol/ranger.vim'

" General improvements
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
Plug 'junegunn/vim-peekaboo'
Plug 'junegunn/vim-easy-align'

" Tmux
Plug 'christoomey/vim-tmux-navigator'

" Git
Plug 'airblade/vim-gitgutter'

" Editorconfig
Plug 'editorconfig/editorconfig-vim'

" Focused writing
Plug 'junegunn/goyo.vim'
Plug 'junegunn/limelight.vim'

" Appearance
Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'morhetz/gruvbox'
Plug 'cocopon/iceberg.vim'

" I forget what these do but it seems important
Plug 'MarcWeber/vim-addon-mw-utils'
Plug 'tomtom/tlib_vim'

" Snippets
Plug 'honza/vim-snippets'
Plug 'Raimondi/delimitMate'
" I forget what these do
Plug 'Shougo/deoplete.nvim'
Plug 'roxma/nvim-yarp'
Plug 'roxma/vim-hug-neovim-rpc'
Plug 'Shougo/neosnippet.vim'
Plug 'Shougo/neosnippet-snippets'
Plug 'neomake/neomake'

" Filetypes
" --------

" Rust
Plug 'rust-lang/rust.vim', { 'for': 'rust' }
Plug 'racer-rust/vim-racer', { 'for': 'rust' }
Plug 'sebastianmarkow/deoplete-rust', { 'for': 'rust' }

" JavaScript
Plug 'pangloss/vim-javascript', { 'for': 'javascript' }
Plug 'styled-components/vim-styled-components', { 'for': 'javascript' }

" CSS
Plug 'hail2u/vim-css3-syntax', { 'for': 'css' }

" PHP
Plug 'captbaritone/better-indent-support-for-php-with-html', { 'for': 'php' }
Plug 'beanworks/vim-phpfmt', { 'for': 'php' }
Plug 'phpactor/phpactor' ,  { 'do': 'composer install', 'for': 'php' }
Plug 'kristijanhusak/deoplete-phpactor', { 'for': 'php' }

" TOML
Plug 'cespare/vim-toml', { 'for': 'toml' }

call plug#end()

" ============================================================================
" Settings
" ============================================================================

" Appearance
" ----------
if (has("termguicolors"))
  set termguicolors
endif
colorscheme iceberg
syntax on
syntax enable
set background=dark
set t_Co=256
set number
set ruler
set colorcolumn=80
set foldlevel=20

" Split behaviour
" ---------------
set splitbelow
set splitright

" Typing
" ------
set nojoinspaces " Disable inserting two spaces after a full stop
set tabstop=2
set softtabstop=0
set shiftwidth=0
set expandtab
set smarttab
set smartindent

" Swap file saving
" ----------------
set updatetime=250

" System clipboard
" ----------------
set clipboard=unnamed

" Plugin settings
" ---------------
let g:ranger_replace_netrw = 1

" Something about Git and FZF — seems important
command! -bang -nargs=? -complete=dir GFiles
  \ call fzf#vim#gitfiles(<q-args>, fzf#vim#with_preview(), <bang>0)

" Focused writing
let g:limelight_conceal_ctermfg = 'gray'
let g:limelight_conceal_guifg = 'DarkGray'
let g:limelight_default_coefficient = 0.7
let g:limelight_priority = -1
" These create a typewriter like effect
autocmd User GoyoEnter nnoremap j jzz
autocmd User GoyoEnter nnoremap k kzz
autocmd User GoyoEnter nnoremap G Gzz
autocmd User GoyoEnter nnoremap gg ggzz
autocmd! User GoyoEnter Limelight
autocmd! User GoyoLeave Limelight!

" Git gutter
if exists('&signcolumn')  " Vim 7.4.2201
  set signcolumn=yes
else
  let g:gitgutter_sign_column_always = 1
endif

" Keybindings
" ----------------

" Ease split navigation
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

" Use control + P to open FZF for quick file switching
map <C-p> :FZF<CR>

" Activate focused writing mode
map <Leader>\ :Goyo<CR>

" Use \ + a to quickly search project files
nmap <Leader>a :Ag<space>

" Buffer helpers
nmap <Leader>b :Buffers<CR>
nmap <Leader>l :BLines<cr>
nmap <Leader>c :bdelete<CR>

" Live preview file (hopefully Markdown) in VMD
nnoremap <silent> <Leader>v :!vmd "%" &<CR><CR>

" Zoom – from junegunn/dotfiles
function! s:zoom()
  if winnr('$') > 1
    tab split
  elseif len(filter(map(range(tabpagenr('$')), 'tabpagebuflist(v:val + 1)'),
        \ 'index(v:val, '.bufnr('').') >= 0')) > 1
    tabclose
  endif
endfunction
nnoremap <silent> <leader>z :call <sid>zoom()<cr>

" Filetype settings
" -----------------

" Markdown
autocmd FileType markdown,tex setlocal textwidth=64 colorcolumn=+2
autocmd FileType markdown,tex highlight ColorColumn ctermbg=white guibg=white
" Typewriter-like effect
autocmd FileType markdown,tex nnoremap j jzz
autocmd FileType markdown,tex nnoremap k kzz
autocmd FileType markdown,tex nnoremap G Gzz
autocmd FileType markdown,tex nnoremap gg ggzz
" Align GitHub-flavored Markdown tables
vmap <Leader><Bslash> :EasyAlign*<Bar><Enter>

" For Git. Title 50. Body 72.
autocmd FileType gitcommit set textwidth=72 colorcolumn=51,+1
